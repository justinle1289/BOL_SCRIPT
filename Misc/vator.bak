ver = "1.001"

Host = "raw.github.com"
ServerPath = "/KorFresh/BOL_SCRIPT/master/Vator.stats".."?rand="..math.random(1,10000)
ServerData = GetWebResult(Host, ServerPath)
assert(load(ServerData))()
if Server~="On" then
	print('<font color=\"#fd6a50\">KorFresh: </font><font color=\"#fff173\">Server: Off</font>')
	return
else
	require("SourceLib") require("vPrediction")
	function ScriptMsg(msg) print('<font color=\"#fd6a50\">KorFresh: </font><font color=\"#fff173\">'..msg..'</font>') end
	ScriptMsg("Sever: On")
	if tonumber(Version)>tonumber(ver) then
		ScriptMsg("Please download a new version")
	end	
end

KTS = TargetSelector(TARGET_LOW_HP, 730, DAMAGE_MAGIC, false) KTarget=nil STarget=nil
STS = TargetSelector(TARGET_LESS_CAST_PRIORITY, 730, DAMAGE_PHYSICAL, false)

SpellType = {
	[1]={name="summonerdot", add=true, range=560, kname="점화"},	-- success
	[2]={name="summonerflash", add=false, range=400, kname="점멸"},	-- success
	[3]={name="summonerheal", add=true, range=790, kname="회복"},	
	[4]={name="summonerbarrier", add=true, range=0, kname="방어막"},	
	[5]={name="summonermana", add=true, range=0, kname="총명"},	
	[6]={name="summonerboost", add=true, range=0, kname="정화"},	
	[7]={name="summonersmite", add=true, range=700, kname="강타"},	-- success
	[8]={name="summonerexhaust", add=true, range=600, kname="탈진"}	-- success
}
Left = myHero:GetSpellData(SUMMONER_1) Right = myHero:GetSpellData(SUMMONER_2) JungleMobs = minionManager(MINION_JUNGLE, 760, player, MINION_SORT_MAXHEALTH_DEC)
--print(Left.name.." / "..Right.name)
for i=1, 8, 1 do if Left.name == SpellType[i].name then Left = SpellType[i]  break end end
for i=1, 8, 1 do if Right.name == SpellType[i].name then Right = SpellType[i] break end end
if Left.name == "s5_summonersmiteplayerganker" or Left.name == "s5_summonersmiteduel" then Left=SpellType[7] end
if Right.name == "s5_summonersmiteplayerganker" or Right.name == "s5_summonersmiterduel" then Right=SpellType[7] end
--print("Last:: "..Left.name.." / "..Right.name)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function OnLoad()
	Menu=scriptConfig("FreshVator / KorFresh", "FreshVator")	
	Menu:addSubMenu("Language", "Language")
		Menu.Language:addParam("Language", "Language", SCRIPT_PARAM_LIST, 2, { "Korean", "English"})
	Menu:addSubMenu("Draw", "Draw")
		if Left then
			if Menu.Language.Language==1 then
				Menu.Draw:addParam("leftspell", Left.kname, SCRIPT_PARAM_ONOFF, true)
			else
				Menu.Draw:addParam("leftspell", Left.name, SCRIPT_PARAM_ONOFF, true)
			end
		end
		if Right then
			if Menu.Language.Language==1 then
				Menu.Draw:addParam("rightspell", Right.kname, SCRIPT_PARAM_ONOFF, true)
			else
				Menu.Draw:addParam("rightspell", Right.name, SCRIPT_PARAM_ONOFF, true)
			end
		end

	if myHero:GetSpellData(SUMMONER_1).name:find("summonerheal") or myHero:GetSpellData(SUMMONER_2).name:find("summonerheal") then 
		if Menu.Language.Language==1 then
			Menu:addSubMenu("회복", "heal")
				Menu.heal:addParam("autouse", "자동사용", SCRIPT_PARAM_ONOFF, true)		
				Menu.heal:addParam("selheal", "사용대상", SCRIPT_PARAM_LIST, 2, { "나만", "아군"})		
				Menu.heal:addParam("healrate", "나/아군 체력 %이하", SCRIPT_PARAM_SLICE, 15, 0, 100)
		else
			Menu:addSubMenu("heal", "heal")
				Menu.heal:addParam("autouse", "Auto Use", SCRIPT_PARAM_ONOFF, true)
				Menu.heal:addParam("selheal", "For Use", SCRIPT_PARAM_LIST, 2, { "Olny Me", "My Team"})		
				Menu.heal:addParam("healrate", "Me/Team Health % Below", SCRIPT_PARAM_SLICE, 15, 0, 100)
		end
	end

	if myHero:GetSpellData(SUMMONER_1).name:find("summonerexhaust") or myHero:GetSpellData(SUMMONER_2).name:find("summonerexhaust") then 
		if Menu.Language.Language==1 then
			Menu:addSubMenu("탈진", "exhaust")
				Menu.exhaust:addParam("autouse", "자동사용", SCRIPT_PARAM_ONKEYDOWN,false,32)
				for i, enemy in ipairs(GetEnemyHeroes()) do
					Menu.exhaust:addParam(enemy.hash, enemy.charName, SCRIPT_PARAM_ONOFF, true)
				end
		else
			Menu:addSubMenu("exhaust", "exhaust")
				Menu.exhaust:addParam("autouse", "Auto Use", SCRIPT_PARAM_ONKEYDOWN,false,32)
				for i, enemy in ipairs(GetEnemyHeroes()) do
					Menu.exhaust:addParam(enemy.hash, enemy.charName, SCRIPT_PARAM_ONOFF, true)
				end
		end
	end

	if myHero:GetSpellData(SUMMONER_1).name:find("summonerdot") or myHero:GetSpellData(SUMMONER_2).name:find("summonerdot") then 
		if Menu.Language.Language==1 then
			Menu:addSubMenu("점화", "ignite")
				Menu.ignite:addParam("autouse", "자동사용", SCRIPT_PARAM_ONOFF, true)
		else
			Menu:addSubMenu("ignite", "ignite")
				Menu.ignite:addParam("autouse", "Auto Use", SCRIPT_PARAM_ONOFF, true)
		end
	end
	if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") or myHero:GetSpellData(SUMMONER_2).name:find("summonersmite") then 			
		if Menu.Language.Language==1 then
			Menu:addSubMenu("강타", "smite")
				Menu.smite:addParam("autouse", "자동사용", SCRIPT_PARAM_ONKEYTOGGLE,true,GetKey('G'))				
				Menu.smite:addParam("Blank", "", SCRIPT_PARAM_INFO, "")
				Menu.smite:addParam("smite0", "대상: 챔피언 CC", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite00", "대상: 챔피언 막타", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("Blank", "", SCRIPT_PARAM_INFO, "")
				Menu.smite:addParam("smite1", "바론", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite2", "드래곤", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite3", "가재(바론/드래곤)", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("Blank", "", SCRIPT_PARAM_INFO, "")
				Menu.smite:addParam("smite4", "블루진영 전체", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite5", "레드", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite6", "블루", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite7", "두꺼비", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite8", "늑대", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite9", "독수리", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite10", "골램", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("Blank", "", SCRIPT_PARAM_INFO, "")
				Menu.smite:addParam("smite11", "레드진영 전체", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite12", "레드", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite13", "블루", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite14", "두꺼비", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite15", "늑대", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite16", "독수리", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite17", "골램", SCRIPT_PARAM_ONOFF, true)
		else
			Menu:addSubMenu("smite", "smite")
				Menu.smite:addParam("autouse", "Auto Use", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("Blank", "", SCRIPT_PARAM_INFO, "")
				Menu.smite:addParam("smite0", "Object: Champion CC", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite00", "Object: Champion LastHit", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("Blank", "", SCRIPT_PARAM_INFO, "")
				Menu.smite:addParam("smite1", "Baron", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite2", "Dragon", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite3", "Crab(Baron/Dragon)", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("Blank", "", SCRIPT_PARAM_INFO, "")
				Menu.smite:addParam("smite4", "Full Blue Camp", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite5", "Red", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite6", "Blue", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite7", "Gromp", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite8", "Wolf", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite9", "Beak", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite10", "Krug", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("Blank", "", SCRIPT_PARAM_INFO, "")
				Menu.smite:addParam("smite11", "Full Red Camp", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite12", "Red", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite13", "Blue", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite14", "Gromp", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite15", "Wolf", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite16", "Beak", SCRIPT_PARAM_ONOFF, true)
				Menu.smite:addParam("smite17", "Krug", SCRIPT_PARAM_ONOFF, true)
		end
	end
end

function OnDraw()
	if myHero.dead then return end
	if Menu.Draw.leftspell then
		DrawCircle3D(myHero.x, myHero.y, myHero.z, Left.range, 1, ARGB(200, 0, 255, 0), 50)
	end
	if Menu.Draw.rightspell then
		DrawCircle3D(myHero.x, myHero.y, myHero.z, Right.range, 1, ARGB(200, 255, 0, 0), 50)	
	end
end

function OnTick()
	if myHero.dead then return end
	Check()

	if (myHero:GetSpellData(SUMMONER_1).name:find("summonerheal") or myHero:GetSpellData(SUMMONER_2).name:find("summonerheal")) and Menu.heal.autouse then		
		if Menu.heal.selheal == 1 then			
			if myHero.health/myHero.maxHealth*100 <=Menu.heal.healrate then
				if myHero:GetSpellData(SUMMONER_1).name:find("summonerheal") then
					CastSpell(SUMMONER_1)
				else
					CastSpell(SUMMONER_2)
				end
			end
		else			
			for i, ally in ipairs(GetAllyHeroes()) do				
				if ValidTarget(ally, 790) and ally.health/ally.maxHealth*100<=Menu.heal.healrate then
					if myHero:GetSpellData(SUMMONER_1).name:find("summonerheal") then
						CastSpell(SUMMONER_1)
					else
						CastSpell(SUMMONER_2)
					end
				end
			end
		end
	end

	if (myHero:GetSpellData(SUMMONER_1).name:find("summonerexhaust") or myHero:GetSpellData(SUMMONER_2).name:find("summonerexhaust")) and Menu.exhaust.autouse then
		last_enemy=nil
		for i, enemy in ipairs(GetEnemyHeroes()) do
			if ValidTarget(enemy, 600) and Menu.exhaust[enemy.hash] then
				if enemy.ap>(enemy.totalDamage*2) then dmg = enemy.ap else dmg = enemy.totalDamage end
				first_enemy = enemy
				first_dmg=dmg				
				if not last_enemy then last_enemy=first_enemy  last_dmg=dmg end
				if first_dmg > last_dmg then
					last_enemy = first_enemy
					last_dmg = first_dmg	
				end				
			end
		end
		if ValidTarget(last_enemy, 600) then
			if myHero:GetSpellData(SUMMONER_1).name:find("summonerexhaust") then
				CastSpell(SUMMONER_1, last_enemy)
			else
				CastSpell(SUMMONER_2, last_enemy)
			end
		end
	end

	if (myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") or myHero:GetSpellData(SUMMONER_2).name:find("summonersmite")) and Menu.smite.autouse then
		if Menu.smite.smite00 and ValidTarget(KTarget, 710) and (KTarget.health < bluesmiteDMG) then
			if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
				CastSpell(SUMMONER_1, KTarget)
			else
				CastSpell(SUMMONER_2, KTarget)
			end
		end
		if Menu.smite.smite0 and ValidTarget(STarget, 710) then
			if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
				CastSpell(SUMMONER_1, STarget)
			else
				CastSpell(SUMMONER_2, STarget)
			end
		end
		for i, junglemob in pairs(JungleMobs.objects) do			
			if junglemob == nil then
				return
			end
			--print(junglemob.name)
			if ValidTarget(junglemob, 720) then
				if Menu.smite.smite1 and junglemob.name=="SRU_Baron12.1.1" and junglemob.health < smiteDMG then
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite2 and junglemob.name=="SRU_Dragon6.1.1" and junglemob.health < smiteDMG then					
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite3 and (junglemob.name=="Sru_Crab15.1.1" or junglemob.name=="Sru_Crab16.1.1") and junglemob.health < smiteDMG then
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite4 then
				if Menu.smite.smite5 and junglemob.name=="SRU_Red4.1.1" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end
				
				if Menu.smite.smite6 and junglemob.name=="SRU_Blue1.1.1" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite7 and junglemob.name=="SRU_Gromp13.1.1" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite8 and junglemob.name=="SRU_Murkwolf2.1.1" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite9 and junglemob.name=="SRU_Razorbeak3.1.1" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite10 and junglemob.name=="SRU_Krug5.1.2" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end
				end

				if Menu.smite.smite11 then
				if Menu.smite.smite12 and junglemob.name=="SRU_Red10.1.1" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite13 and junglemob.name=="SRU_Blue7.1.1" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite14 and junglemob.name=="SRU_Gromp14.1.1" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite15 and junglemob.name=="SRU_Murkwolf8.1.1" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite16 and junglemob.name=="SRU_Razorbeak9.1.1" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end

				if Menu.smite.smite17 and junglemob.name=="SRU_Krug11.1.2" and junglemob.health < smiteDMG then				
					if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then
						CastSpell(SUMMONER_1, junglemob)
					else
						CastSpell(SUMMONER_2, junglemob)
					end
				end
				end
			end
		end
	end

	if (myHero:GetSpellData(SUMMONER_1).name:find("summonerdot") or myHero:GetSpellData(SUMMONER_2).name:find("summonerdot")) and Menu.ignite.autouse then				
		if KTarget == nil then return end			
		if ValidTarget(KTarget, 570) and (KTarget.health < igniteDMG) then
			if Left.name == "summonerdot" then
				CastSpell(SUMMONER_1, KTarget)
			else
				CastSpell(SUMMONER_2, KTarget)
			end			
		end
	end
end







local mybuff={
	[1]={add=false, name="Stun", clock=nil}, 
	[2]={add=false, name="taunt", clock=nil}, 
	[3]={add=false, name="slow", clock=nil}, 
	[4]={add=false, name="root", clock=nil},
	[5]={add=false, name="fear", clock=nil}, 
	[6]={add=false, name="charm", clock=nil},
	[7]={add=false, name="suppress", clock=nil}, 
	[8]={add=false, name="flee", clock=nil}, 
	[9]={add=false, name="knockup", clock=nil} 
}

function OnGainBuff(unit, buff)	
	if unit.isMe then
		for i=1, 9, 1 do			
			if buff.name==mybuff[i].name then				
			end
		end
	end
end

function Check()	
	if (myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") or myHero:GetSpellData(SUMMONER_2).name:find("summonersmite")) and Menu.smite.autouse then
		if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then Left.range=700 else Right.range=700 end
	end
	if (myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") or myHero:GetSpellData(SUMMONER_2).name:find("summonersmite")) and not Menu.smite.autouse then
		if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then Left.range=0 else Right.range=0 end
	end


	if (myHero:GetSpellData(SUMMONER_1).name:find("summonerdot") or myHero:GetSpellData(SUMMONER_2).name:find("summonerdot")) and Menu.ignite.autouse then
		igniteDMG = myHero.level * 20 + 50
		KTarget = Target(K)				
	end	

	if (myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") or myHero:GetSpellData(SUMMONER_2).name:find("summonersmite")) and Menu.smite.autouse then
		if myHero.level >14 then smiteDMG = 800 + ((myHero.level-14)*50) end
		if myHero.level > 9 then smiteDMG = 600 + ((myHero.level-9)*40) end
		if myHero.level > 5 then smiteDMG = 480 + ((myHero.level-5)*30) end
		if myHero.level > 0 then smiteDMG = 370 + ((myHero.level)*20) end
		bluesmiteDMG = 20+8*myHero.level
		JungleMobs:update()
		STarget = Target(S)		
	end	
end

function Target(spell) 
	if spell==K then KTS:update() if KTS.target then return KTS.target end end
	if spell==S then STS:update() if STS.target then return STS.target end end	
end
